====================================
Gun Survivors

--------------------------
Source:
https://www.udemy.com/course/unreal-engine-2d/learn/lecture/44277214#overview

-----------------------------------

====================================
26. The Arena

Two Ways to Handle Sorting in 2D:
* Use distance from camera (e.g. Y value)
* Use TranslucentUnlitSpriteMaterial and set Rendering->Advanced->Translucency Sort Priority
  * Sprites with lower numbers are drawn below sprites with higher numbers

Collision:
* This is set on both the SpriteComponent and CapsuleComponents (if it has a capsule)

Camera:
* Added camera to scene, as game camera will be static
* Setting the in-scene camera for the player:
  * Details -> Auto Player Activation -> Auto Activate for Player: Player0
* Hide in-scene camera (prevent from blocking your view when editing the level)
  * Set Scale to 0.01

====================================
27. Flipbooks 101

In order to use Flipbook in the game, you must use a Flipbook component. Flipbook Components do not accept Sprites, so even if you have a single frame animation, you still need to make a Flipbook from the single Sprite.

====================================
28. Player Class & Blueprint

-------------------------
Setting up C++ portion
-------------------------

ATopDownCharacter

Components for 2D Characters:
#include "Components/CapsuleComponent.h"
#include "PaperFlipbookComponent.h"

UPROPERTIES:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	TObjectPtr<class UCapsuleComponent> CapsuleComponent;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	TObjectPtr<class UPaperFlipbookComponent> PaperFlipbookComponent;

	VisibleAnywhere: Means we can see it in the Editor
	BlueprintReadWrite: Means we can read and write to it from Blueprint Graphs (i.e. Getters and Setters)

Create Components using:
CreateDefaultSubobject()

Set the root component of the object using:
SetRootComponent()
	CapsuleComponent = CreateDefaultSubobject<UCapsuleComponent>(TEXT("CapsuleComponent"));
	SetRootComponent(CapsuleComponent);

Create and attach a component to another component:
	CharacterFlipbookComponent = CreateDefaultSubobject<UPaperFlipbookComponent>(TEXT("CharacterFlipbookComponent"));
	CharacterFlipbookComponent->SetupAttachment(RootComponent);

Note:
RootComponent is set using SetRootComponent(), so you could also do: 
CharacterFlipbookComponent->SetupAttachment(CapsuleComponent);

NOTE:
If you are creating a SpringArm and a Child Camera, you would set them up like this:
	CameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT("CameraComponent"));
	CameraComponent->SetupAttachment(SpringArmComponent, USpringArmComponent::SocketName); // Attach camera to SpringArm's socket

-------------------------
Setting Up Blueprint
-------------------------
After creating a Blueprint class with our TopDownCharacter as the parent class, you will see the components in the Hierarchy.

Flipbook (CharacterFlipbookComponent):
* Set the Flipbook in the Details -> Sprite -> Source Flipbook
  * Play Rate changes the speed at which the flipbook animation is played.
* Turn off Sprite collision, as we will use the Capsule
* If not set, use TranslucentUnlitSpriteMaterial in order to set the Rendering->Advanced->Translucency Sort Priority

CapsuleComponent:
* Adjust CapsuleHalfHeight and CapsuleRadius around the sprite
* Change collision preset to Pawn
  * Set to "Pawn" because the owning object (the player) is a Pawn

--------------------------------------------------
Adding a player character to the scene for testing
--------------------------------------------------
* Drag a BP_Player into the scene.
* Allow this BP_Player instance to be controlled by the player:
  * Details -> Pawn -> Auto Possess Player: Player 0 (Changed from Disabled)
    * (Do this for testing until you update the GameMode with a Default Pawn class and a PlayerStart in the level)

====================================
29. The Game Mode

* Using GameModeBase as the parent class for GunSurvivorsGameMode: BP_GunSurvivorsGameMode
* Set BP_Player as the default player pawn class:
  * Open gamemode -> Class Defaults -> Classes -> Default Pawn Class:  Set to BP_Player
* Set BP_GunSurvivorsGameMode as the default Game Mode:
  * Edit -> Project Settings -> Project -> Maps & Modes-> Default Modes -> Default GameMode:  Set to BP_GunSurvivorsGameMode

====================================
30. Input System Setup

Two types of input assets created in the editor:
* Input Mapping Context
* Input Action

-------------------------
Setting up C++ portion
-------------------------

Include files:
#include "Components/InputComponent.h"
#include "EnhancedInputComponent.h"
#include "EnhancedInputSubsystems.h"
#include "InputActionValue.h"
#include "GameFramework/Controller.h"

	UPROPERTY(EditAnywhere, BlueprintReadOnly)
	TObjectPtr<class UInputMappingContext> InputMappingContext;

	UPROPERTY(EditAnywhere, BlueprintReadOnly)
	TObjectPtr<class UInputAction> MoveInputAction;


EditAnywhere:      This means it can be edited (i.e. assigned) in the Blueprint Editor
BlueprintReadOnly: This means it can be accessed in Blueprint Graphs but not changed in Blueprint Grapsh (i.e. getter only)

Register the inputs in BeginPlay() using
UEnhancedInputLocalPlayerSubsystem::AddMappingContext

// Register Inputs from the EnhancedInputLocalPlayerSubsystem (which is accessed from the LocalPlayer)
if (APlayerController* PlayerController = Cast<APlayerController>(Controller))
{
	if (UEnhancedInputLocalPlayerSubsystem* InputSubsystem = ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(PlayerController->GetLocalPlayer()))
	{
		InputSubsystem->AddMappingContext(InputMappingContext, 0);
	}
}

NOTE:
* TODO - Check if you can (or should get the subsystem like this:

// Register Inputs from the EnhancedInputLocalPlayerSubsystem (which is accessed from the LocalPlayer)
if (APlayerController* PlayerController = Cast<APlayerController>(Controller))
{
	if (ULocalPlayer* LocalPlayer = PlayerController->GetLocalPlayer())
	{
		if (UEnhancedInputLocalPlayerSubsystem* InputSubsystem = LocalPlayer->GetSubsystem<UEnhancedInputLocalPlayerSubsystem>())
		{
			InputSubsystem->AddMappingContext(InputMappingContext, 0, FModifyContextOptions());
		}
	}
}

====================================
