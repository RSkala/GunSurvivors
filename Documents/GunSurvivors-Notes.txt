====================================
Gun Survivors

--------------------------
Source:
https://www.udemy.com/course/unreal-engine-2d/learn/lecture/44277214#overview

-----------------------------------

====================================
26. The Arena

Two Ways to Handle Sorting in 2D:
* Use distance from camera (e.g. Y value)
* Use TranslucentUnlitSpriteMaterial and set Rendering->Advanced->Translucency Sort Priority
  * Sprites with lower numbers are drawn below sprites with higher numbers

Collision:
* This is set on both the SpriteComponent and CapsuleComponents (if it has a capsule)

Camera:
* Added camera to scene, as game camera will be static
* Setting the in-scene camera for the player:
  * Details -> Auto Player Activation -> Auto Activate for Player: Player0
* Hide in-scene camera (prevent from blocking your view when editing the level)
  * Set Scale to 0.01

====================================
27. Flipbooks 101

In order to use Flipbook in the game, you must use a Flipbook component. Flipbook Components do not accept Sprites, so even if you have a single frame animation, you still need to make a Flipbook from the single Sprite.

====================================
28. Player Class & Blueprint

-------------------------
Setting up C++ portion
-------------------------

ATopDownCharacter

Components for 2D Characters:
#include "Components/CapsuleComponent.h"
#include "PaperFlipbookComponent.h"

UPROPERTIES:
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	TObjectPtr<class UCapsuleComponent> CapsuleComponent;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	TObjectPtr<class UPaperFlipbookComponent> PaperFlipbookComponent;

	VisibleAnywhere: Means we can see it in the Editor (cannot be edited at all)
	BlueprintReadWrite: Means we can read and write to it from Blueprint Graphs (i.e. Getters and Setters)

Create Components using:
CreateDefaultSubobject()

Set the root component of the object using:
SetRootComponent()
	CapsuleComponent = CreateDefaultSubobject<UCapsuleComponent>(TEXT("CapsuleComponent"));
	SetRootComponent(CapsuleComponent);

Create and attach a component to another component:
	CharacterFlipbookComponent = CreateDefaultSubobject<UPaperFlipbookComponent>(TEXT("CharacterFlipbookComponent"));
	CharacterFlipbookComponent->SetupAttachment(RootComponent);

Note:
RootComponent is set using SetRootComponent(), so you could also do: 
CharacterFlipbookComponent->SetupAttachment(CapsuleComponent);

NOTE:
If you are creating a SpringArm and a Child Camera, you would set them up like this:
	CameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT("CameraComponent"));
	CameraComponent->SetupAttachment(SpringArmComponent, USpringArmComponent::SocketName); // Attach camera to SpringArm's socket

-------------------------
Setting Up Blueprint
-------------------------
After creating a Blueprint class with our TopDownCharacter as the parent class, you will see the components in the Hierarchy.

Flipbook (CharacterFlipbookComponent):
* Set the Flipbook in the Details -> Sprite -> Source Flipbook
  * Play Rate changes the speed at which the flipbook animation is played.
* Turn off Sprite collision, as we will use the Capsule
* If not set, use TranslucentUnlitSpriteMaterial in order to set the Rendering->Advanced->Translucency Sort Priority

CapsuleComponent:
* Adjust CapsuleHalfHeight and CapsuleRadius around the sprite
* Change collision preset to Pawn
  * Set to "Pawn" because the owning object (the player) is a Pawn

--------------------------------------------------
Adding a player character to the scene for testing
--------------------------------------------------
* Drag a BP_Player into the scene.
* Allow this BP_Player instance to be controlled by the player:
  * Details -> Pawn -> Auto Possess Player: Player 0 (Changed from Disabled)
    * (Do this for testing until you update the GameMode with a Default Pawn class and a PlayerStart in the level)

====================================
29. The Game Mode

* Using GameModeBase as the parent class for GunSurvivorsGameMode: BP_GunSurvivorsGameMode
* Set BP_Player as the default player pawn class:
  * Open gamemode -> Class Defaults -> Classes -> Default Pawn Class:  Set to BP_Player
* Set BP_GunSurvivorsGameMode as the default Game Mode:
  * Edit -> Project Settings -> Project -> Maps & Modes-> Default Modes -> Default GameMode:  Set to BP_GunSurvivorsGameMode

====================================
30. Input System Setup

Two types of input assets created in the editor:
* Input Mapping Context
* Input Action

-------------------------
Setting up C++ portion
-------------------------

Include files:
#include "Components/InputComponent.h"
#include "EnhancedInputComponent.h"
#include "EnhancedInputSubsystems.h"
#include "InputActionValue.h"
#include "GameFramework/Controller.h"

	UPROPERTY(EditAnywhere, BlueprintReadOnly)
	TObjectPtr<class UInputMappingContext> InputMappingContext;

	UPROPERTY(EditAnywhere, BlueprintReadOnly)
	TObjectPtr<class UInputAction> MoveInputAction;


EditAnywhere:      This means it can be edited (i.e. assigned) in the Blueprint Editor
BlueprintReadOnly: This means it can be accessed in Blueprint Graphs but not changed in Blueprint Grapsh (i.e. getter only)

Register the inputs in BeginPlay() using
UEnhancedInputLocalPlayerSubsystem::AddMappingContext

// Register Inputs from the EnhancedInputLocalPlayerSubsystem (which is accessed from the LocalPlayer)
if (APlayerController* PlayerController = Cast<APlayerController>(Controller))
{
	if (UEnhancedInputLocalPlayerSubsystem* InputSubsystem = ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(PlayerController->GetLocalPlayer()))
	{
		InputSubsystem->AddMappingContext(InputMappingContext, 0);
	}
}

NOTE:
* TODO - Check if you can (or should get the subsystem like this:

// Register Inputs from the EnhancedInputLocalPlayerSubsystem (which is accessed from the LocalPlayer)
if (APlayerController* PlayerController = Cast<APlayerController>(Controller))
{
	if (ULocalPlayer* LocalPlayer = PlayerController->GetLocalPlayer())
	{
		if (UEnhancedInputLocalPlayerSubsystem* InputSubsystem = LocalPlayer->GetSubsystem<UEnhancedInputLocalPlayerSubsystem>())
		{
			InputSubsystem->AddMappingContext(InputMappingContext, 0, FModifyContextOptions());
		}
	}
}

========================================================================
31. Binding Actions

For binding actions, Bind a function which passes an object of type FInputActionValue:

	void MoveTriggered(const struct FInputActionValue& InputActionValue);
	void MoveCompleted(const struct FInputActionValue& InputActionValue);
	void Shoot(const struct FInputActionValue& InputActionValue);

Bind the functions in SetupPlayerInputComponent()
void ATopDownCharacter::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)

Since UInputComponent* PlayerInputComponent is being passed, we can cast this:

	if (UEnhancedInputComponent* EnhancedInputComponent = Cast<UEnhancedInputComponent>(PlayerInputComponent))
	{
		EnhancedInputComponent->BindAction(MoveInputAction, ETriggerEvent::Triggered, this, &ThisClass::MoveTriggered);
		EnhancedInputComponent->BindAction(MoveInputAction, ETriggerEvent::Completed, this, &ThisClass::MoveCompleted);
		EnhancedInputComponent->BindAction(MoveInputAction, ETriggerEvent::Canceled, this, &ThisClass::MoveCompleted);

		EnhancedInputComponent->BindAction(ShootInputAction, ETriggerEvent::Started, this, &ThisClass::Shoot);
		EnhancedInputComponent->BindAction(ShootInputAction, ETriggerEvent::Triggered, this, &ThisClass::Shoot);
	}

In the bound input functions, access the input values:
FVector2D MoveActionValue = InputActionValue.Get<FVector2d>();

========================================================================
32. Player Movement

Set the movement direction:
FVector2D MoveActionValue = InputActionValue.Get<FVector2d>();
MovementDirection = MoveActionValue;

Update player movement
void ATopDownCharacter::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

	// Check if player can move
	if (bCanMove)
	{
		// Check if player has any input
		if (MovementDirection.Length() > 0.0f)
		{
			if (MovementDirection.Length() > 1.0f)
			{
				MovementDirection.Normalize(); // Note: We could also go MovementDirection.GetSafeNormal() and use that
			}

			// Get the distance to move this frame using the movement direction
			FVector2D DistanceToMove = MovementDirection * MovementSpeed * DeltaTime;

			// Get the current position of the player at this frame
			FVector CurrentLocation = GetActorLocation();

			// The player moves in the XZ plane
			FVector NewLocation = CurrentLocation + FVector(DistanceToMove.X, 0.0f, DistanceToMove.Y);

			// Set the player's new location
			SetActorLocation(NewLocation);
		}
	}
}


========================================================================
33. Switching Flipbooks

-------------------
Changing Flipbooks
-------------------
You need a reference to a UPaperFlipbook object.
* NOTE: This is DIFFERENT from a UPaperFlipbookComponent
* A UPaperFlipbook is a reference to the actual Flipbook ASSET

	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "TopDownCharacter|Flipbook")
	TObjectPtr<class UPaperFlipbook> IdleFlipbook;

	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "TopDownCharacter|Flipbook")
	TObjectPtr<class UPaperFlipbook> RunFlipbook;

Set the Flipbook from the FlipbookComponent:
CharacterFlipbookComponent->SetFlipbook(RunFlipbook);
...
CharacterFlipbookComponent->SetFlipbook(IdleFlipbook);

------------------------------
Changing Flipbook Directions
------------------------------

You can do this in one of two ways:
* Negating a SCALE (-1)
* Rotating by 180 degrees

For example:
To make the player face LEFT:
* Setting the X scale of the flipbook to -1
OR
* Rotate around the Z axis by 180 degrees (Roll)

BOTH methods are VALID ways to do it. Here, we will be negating the scale

Getting the Scale of a Flipbook:
		FVector FlipbookScale = CharacterFlipbookComponent->GetComponentScale();

Setting the Scale of a Flipbook:
CharacterFlipbookComponent->SetWorldScale3D(FVector(-1.0f, 1.0f, 1.0f));


FVector FlipbookScale = CharacterFlipbookComponent->GetComponentScale();
if (MovementDirection.X < 0.0f)
{
	// Moving Left
	if (FlipbookScale.X > 0.0f)
	{
		// Flip the flipbook scale to face left (if it hasn't been flipped already)
		CharacterFlipbookComponent->SetWorldScale3D(FVector(-1.0f, 1.0f, 1.0f));
	}
}
else if (MovementDirection.X > 0.0f)
{
	// Moving Right
	if (FlipbookScale.X < 0.0f)
	{
		// Flip the flipbook scale to face left (if it hasn't been flipped already)
		CharacterFlipbookComponent->SetWorldScale3D(FVector(1.0f, 1.0f, 1.0f));
	}
}

========================================================================
34. Staying In Map Limits


========================================================================
35. Adding the Gun

Gun:
Gun will be a Sprite Component that rotates around the player
The gun will be attached to a SceneComponent

What is a "SceneComponent"?
* A SceneComponent is a Component that has a Transform (meaning, it has a Position, Rotation and Scale) and nothing else.
  * The equivalent in Unity would be "Transform"

* The Gun will also have a "Bullet Spawn Position" (i.e. a FirePoint), which will also be a SceneComponent


----
C++ 
----
#include "Components/SceneComponent.h"
#include "PaperSpriteComponent.h"

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	TObjectPtr<class USceneComponent> GunParent;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	TObjectPtr<class UPaperSpriteComponent> GunSprite;

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	TObjectPtr<class USceneComponent> BulletSpawnPosition;


----------------------------------------------------------------------------------
NOTE:
* Had an issue where I could not edit the rotation (only the scale) in the BP_Player blueprint.

These are for BLANK Details panels:

https://forums.unrealengine.com/t/solved-blank-detail-panel-for-ustaticmeshcomopnent-in-child-blueprint-class-of-a-c-class/141378/4

FIXES:
(1)
You need to re-create the Blueprint.

Anytime you remove/change components or UPROPERTY meta of a default object, you will have to regenerate the Blueprint. Sometimes reparenting helps, but either way you are likely to lose data. You can add new components without issues usually, but removing or changing existing once will break the BP.

The reason is that the UPROPERTY meta has already been serialized into the Blueprint.

Never use EditDefaultsOnly or BlueprintReadWrite on a component - only use VisibleDefaultsOnly and BlueprintReadOnly.

(2)
Instead of recreating the blueprint, renaming the component (and the display name), compile in code and opening can fix it. If you reference that comp in the blueprint itself you will probably need to relink those.

https://github.com/rweber89/BPCorruptionFix


-----------------------------
https://forums.unrealengine.com/t/static-mesh-inherited-from-c-class-only-shows-scale-option/318257

-----------------------------
Saving:
CapsuleComponent:
Capsule Half Height: 44.0
Capsule Radius: 22.0

Collision: OverlapAllDynamic (default)

-----------------------------

MY FIX:
* I made a DummyComp of type SceneComponent, attached the GunComp to that.
* The GunParentComp looked fine (meaning, it had Location, Rotation, Scale)
* I then removed the creation of DummyComp. 
* I shut down the Editor, compiled, reloaded the editor, and then it seems to have fixed it.
* Note for future: Components set in C++ should be BlueprintReadOnly. Also never EditAnywhere or EditDefaultsOnly (VisibleAnywhere and VisibleDefaultsOnly should be ok).

Note: CapsuleComponent no longer has the Location and Rotation either, but that wasn't fixed. Not sure if that is normal, however.


========================================================================
36. Rotating the Gun

Rotating the Gun:
* Use: FindLookatRotation()
* Get the PlayerPosition (P).
* Get the Mouse Position (M) in World Coordinates (convert from Screen to world)
* Get the direction from the player to the mouse:  (M - P)
* Use that direction for the look at rotation 

Getting the Mouse Position:
* APlayerController::DeprojectMousePositionToWorld
* We do not need MouseWorldDirection, but we have to pass it in anyways

FVector MouseWorldLocation, MouseWorldDirection;
PlayerController->DeprojectMousePositionToWorld(MouseWorldLocation, MouseWorldDirection);

Note:
* Need to #include "Kismet/KismetMathLibrary.h"
to use UKismetMathLibrary::FindLookAtRotation

Full Code:

	// Rotate the gun
	if (APlayerController* PlayerController = Cast<APlayerController>(Controller))
	{
		// Get the player's position in the XZ plane
		FVector CurrentLocation = GetActorLocation();
		FVector StartPos = FVector(CurrentLocation.X, 0.0f, CurrentLocation.Z);

		// Get the mouse position in world coordinates in the XZ plane
		FVector MouseWorldLocation, MouseWorldDirection;
		PlayerController->DeprojectMousePositionToWorld(MouseWorldLocation, MouseWorldDirection);
		FVector TargetPos = FVector(MouseWorldLocation.X, 0.0f, MouseWorldLocation.Z);

		// Create a rotation representing the vector from the player position to the mouse position
		FRotator GunParentRotator = UKismetMathLibrary::FindLookAtRotation(StartPos, TargetPos);

		// Set the GunParentComponent's rotation
		GunParentComp->SetRelativeRotation(GunParentRotator);
	}


----
Ensure the mouse cursor is always visible:
PlayerController->SetShowMouseCursor(true);

========================================================================
37. Creating the Bullet

C++:
#include "Components/SphereComponent.h"
#include "PaperSpriteComponent.h"

	// --- Components ---
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
	TObjectPtr<class USphereComponent> SphereComp;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
	TObjectPtr<class UPaperSpriteComponent> BulletSpriteComp;

	// Create components
	SphereComp = CreateDefaultSubobject<USphereComponent>(TEXT("SphereComp"));
	SetRootComponent(SphereComp);

	BulletSpriteComp = CreateDefaultSubobject<UPaperSpriteComponent>(TEXT("BulletSpriteComp"));
	BulletSpriteComp->SetupAttachment(RootComponent);

========================================================================
38. Moving the Bullet

Bullet:
* MoveDirection
* MoveSpeed

Quick Implementation:
	// Update bullet movement
	FVector BulletPosition = GetActorLocation();
	FVector2D BulletPosition2D = FVector2D(BulletPosition.X, BulletPosition.Z);

	FVector2D MovementAmount = MovementDirection * MovementSpeed * DeltaTime;

	FVector NewPosition = FVector(BulletPosition2D.X, 0.0f, BulletPosition2D.Y) + FVector(MovementAmount.X, 0.0f, MovementAmount.Y);
	
	// Set the new bullet position
	SetActorLocation(NewPosition);

Course Implementation 
* Note: This doesn't take into consideration that the player might not be 0 in the Y:
	// Update bullet movement
	FVector2D DistanceToMove = MovementDirection * MovementSpeed * DeltaTime;

	FVector CurrentLocation = GetActorLocation();
	FVector NewLocation = CurrentLocation + FVector(DistanceToMove.X, 0.0f, DistanceToMove.Y);

	SetActorLocation(NewLocation);

========================================================================
39. Launching the Bullet

Timer:
GetWorldTimerManager().SetTimer


Timers:
FORCEINLINE void SetTimer(FTimerHandle& InOutHandle, UserClass* InObj, typename FTimerDelegate::TMethodPtr< UserClass > InTimerMethod, float InRate, bool InbLoop = false, float InFirstDelay = -1.f)

Destroy Actor:
Destroy();

========================================================================
40. Shooting Cooldown

use a timer handle:

struct FTimerHandle ShootCooldownTimerHandle;

// Start the timer that allows the player to shoot again
GetWorldTimerManager().SetTimer(ShootCooldownTimerHandle, this, &ThisClass::OnShootCooldownTimerTimeout, 1.0f, false, ShootCooldownDurationSeconds);

========================================================================
41. Shooting Bullets

Get Direction from Player to Mouse:
(MouseLocation - PlayerPosition)

Spawning Bullets:

	UPROPERTY(EditDefaultsOnly, Category = "TopDownCharacter|Shooting")
	TSubclassOf<class ABullet> BulletActorToSpawn;

Full Code:
		// Spawn the bullet
		UE_LOG(LogTopDownCharacter, Log, TEXT("ATopDownCharacter::Shoot - %s"), *GetName());
		ABullet* SpawnedBullet = GetWorld()->SpawnActor<ABullet>(BulletActorToSpawn, BulletSpawnPosition->GetComponentLocation(), FRotator::ZeroRotator);
		check(SpawnedBullet != nullptr);

		// Get the world mouse position
		FVector MouseWorldLocation, MouseWorldDirection;
		APlayerController* PlayerController = Cast<APlayerController>(Controller);
		check(PlayerController != nullptr);
		PlayerController->DeprojectMousePositionToWorld(MouseWorldLocation, MouseWorldDirection);

		// Calculate bullet direction
		FVector CurrentLocation = GetActorLocation();
		FVector2D BulletDirection = FVector2D(MouseWorldLocation.X - CurrentLocation.X, MouseWorldLocation.Z - CurrentLocation.Z);
		BulletDirection.Normalize();

		// Launch the bullet
		const float BulletSpeed = 300.0f;
		SpawnedBullet->Launch(BulletDirection, BulletSpeed);


========================================================================
42. Custom Mouse Cursor

Need a widget blueprint:
NOTE: I set this up in TDP, and there was specific steps... TODO!

WidgetBlueprint:
WBP_MouseCursor
* Canvas Panel
  * Image
Image: Set to Crosshair Sprite
* Appearance -> Brush -> Image
* Size X, Y: 50, 50

Change "Fill Screen" to Desired On Screen

Anchor: Center

Project Settings:
Edit -> Project Settings -> Engine -> User Interface -> Software Cursors
* Click + to Add
  * Set type to Default for this demo
  * Change Class to our WBP_MouseCursor

--------------------
Notes regarding software cursors:
* My notes are mouse cursors is in Evernote -> Unreal - UI/UMG -> Mouse Cursor (Custom)
* They are limited by frame rate, so if your framerate is low, the mouse cursor will be choppy
* At least in UE4, Software Cursors were limited by windows scaling (so different people would have different sizes)
* Wastein tutorial on hardware cursors:
   https://www.youtube.com/watch?v=3oSXhCeuu1Q

Notes on Hardware Cursors:
Hardware
* This seems to be the BEST method. That is, DONT use software cursors
* The PNG should be in the Slate folder
* The Slate folder is AUTOMATICALLY cooked 
* In the Content Browser, the Slate folder might look empty, but this is because Unreal expects there to be raw assets there.
* Example Cursor Path: Slate/MouseCursor
  * Notice there is NOT a file extension
* Hot Spot is where the pointer "click" will occur. (0, 0) is the default and is the upper-left corner.
* Wadstein has an excellent video about Hardware Cursor: https://www.youtube.com/watch?v=3oSXhCeuu1Q

========================================================================
43. Creating the Enemy

Create the enemy as normal (Capule, flipbook, etc)

Get a reference to the player:
#include "Kismet/GameplayStatics.h"

Use:
UGameplayStatics::GetActorOfClass(GetWorld(), ATopDownCharacter::StaticClass());

	// --- Player Reference ---
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	TSoftObjectPtr<class ATopDownCharacter> Player;

	// Set like this:
	if (!Player.IsValid())
	{
		AActor* PlayerActor = UGameplayStatics::GetActorOfClass(GetWorld(), ATopDownCharacter::StaticClass());
		if (PlayerActor != nullptr)
		{
			Player = Cast<ATopDownCharacter>(PlayerActor);
		}
	}


========================================================================
44. Enemy Follows Player

Simple Move-To logic:

In Tick():

	// Enemy movement
	if (bIsAlive && bCanFollow && Player.IsValid())
	{
		FVector CurrentLocation = GetActorLocation();
		FVector PlayerLocation = Player->GetActorLocation();
		FVector DirEnemyToPlayer = PlayerLocation - CurrentLocation;
		float DistanceToPlayer = DirEnemyToPlayer.Length();

		if (DistanceToPlayer >= StopDistance)
		{
			DirEnemyToPlayer.Normalize();
			FVector NewLocation = CurrentLocation + (DirEnemyToPlayer * MovementSpeed * DeltaTime);
			SetActorLocation(NewLocation);
		}
	}


========================================================================
45. Flip Enemy Flipbook

		// Face the player
		CurrentLocation = GetActorLocation();
		float FlipbookXScale = FlipbookComp->GetComponentScale().X;

		if ((PlayerLocation.X - CurrentLocation.X) >= 0.0f) // player is on the right side of the enemy (so enemy should face RIGHT)
		{
			FlipbookComp->SetWorldScale3D(FVector(1.0f, 1.0f, 1.0f));
		}
		else // player is on the left side of the enemy (so the enemy should face LEFT)
		{
			FlipbookComp->SetWorldScale3D(FVector(-1.0f, 1.0f, 1.0f));
		}

========================================================================
46. Bullet-Enemy Collision

Need to add Overlap

-------------------------
Collision / Overlaps
-------------------------

The function MUST have the following signature:
DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_SixParams( FComponentBeginOverlapSignature, UPrimitiveComponent, OnComponentBeginOverlap, UPrimitiveComponent*, OverlappedComponent, AActor*, OtherActor, UPrimitiveComponent*, OtherComp, int32, OtherBodyIndex, bool, bFromSweep, const FHitResult &, SweepResult);

=> This is on UPrimitveComponent:
	UPROPERTY(BlueprintAssignable, Category="Collision")
	FComponentBeginOverlapSignature OnComponentBeginOverlap;

Example:
	UFUNCTION()
	void OverlapBegin(
		UPrimitiveComponent* OverlappedComponent,
		AActor* OtherActor,
		UPrimitiveComponent* OtherComponent,
		int32 OtherBodyIndex,
		bool FromSweep,
		const FHitResult& SweepResult);

Since the Delegate is DYNAMIC and MULTICAST, subscribe to the delegate like this:
SphereComp->OnComponentBeginOverlap.AddDynamic(this, &ThisClass::OverlapBegin);

NOTE:
* DYNAMIC: This means the Delegate can be assigned in Blueprint Graphs
* MULTICAST: This means the Delegate can have ONE OR MORE listeners / subscribers
  * Listeners are added with Add()

* NON-DYNAMIC: This means the Delegate CANNOT be assigned in Blueprint Graphs
  * These will simply NOT have the word "DYNAMIC" in the declaration
* SINGLE: This means the Delegate can have ONLY ONE listener / subscriber
  * These will simply NOT have the word "MULTICAST" in the declaration
  * Listeners are added with Bind()

* Subscriber functions MUST be declared as UFUNCTION() otherwise, they will NOT work

-------------------------
Disabling Collision
-------------------------

Turn collision off a PrimitiveComponent:
ENGINE_API virtual void SetCollisionEnabled(ECollisionEnabled::Type NewType);

SphereComp->SetCollisionEnabled(ECollisionEnabled::NoCollision);

------------------------
Destroy a Component
------------------------

Destroy a SceneComponent:
ENGINE_API virtual void DestroyComponent(bool bPromoteChildren = false) override;


BulletSpriteComp->DestroyComponent();

NOTE: Not sure why you would do this...
... This just destroys the Sprite...
... Although we do this in the timer...


-----------------
Debugging Notes:
* Collision was not working for me.
* Shutting down the editor then relaunching seems to have fixed it.
* I'm not sure if it was because my code was out of date (live coding) or not

-----------------

========================================================================
47. Enemy Death

Destroying actor:
Destroy();

Timer:
GetWorldTimerManager().SetTimer(DestroyTimerHandle, this, &ThisClass::OnDestroyTimerTimeout, 1.0f, false, DestroyTimeoutTimeSeconds);

This is in TimerManager.h:
FORCEINLINE void SetTimer(FTimerHandle& InOutHandle, UserClass* InObj, typename FTimerDelegate::TMethodPtr< UserClass > InTimerMethod, float InRate, bool InbLoop = false, float InFirstDelay = -1.f)

Note: There are multiple declarations for SetTimer()

NOTE:
* In the videos, he includes TimerHandle.h. I don't do that and the game still compiles fine.
#include "Engine/TimerHandle.h"

---------------------
Dead FLipbook Asset:

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TObjectPtr<class UPaperFlipbook> DeadFlipbookAsset;

Change  Flipbook:
FlipbookComp->SetFlipbook(DeadFlipbookAsset);

Change Sorting:
FlipbookComp->SetTranslucentSortPriority(-5);

UPrimitiveComponent::SetTranslucentSortPriority

========================================================================
48. The Enemy Spawner

	/** Enemy actor to spawn */
	UPROPERTY(EditDefaultsOnly)
	TSubclassOf<class AEnemy> EnemyActorToSpawn;

=> This gets assigned in the Editor (i.e. in the CDO, Class Default Object) because of the EditDefaultsOnly

Start Timer:
GetWorldTimerManager().SetTimer(SpawnTimerHandle, this, &ThisClass::OnSpawnTimerTimeout, SpawnTime, true, SpawnTime);

Stop Timer:
GetWorldTimerManager().ClearTimer(SpawnTimerHandle);

Spawn Enemy:
AEnemy* SpawnedEnemy = World->SpawnActor<AEnemy>(EnemyActorToSpawn, EnemyLocation, FRotator::ZeroRotator);

========================================================================
49. Better Spawn Position

Design:
* Spawn enemies in some radius (distance) from the enemy spawner, which is at the origin

VRand:  Random Position, but on a SPHERE!
* We just need two dimensions, e.g. X, Z
* These are WITHIN the circle, but we need them on the EDGE of the circle

void AEnemySpawner::SpawnEnemy()
{
	UE_LOG(LogEnemySpawner, Log, TEXT("AEnemySpawner::SpawnEnemy"));

	// Get a random position WITHIN the unit sphere. Cast to FVector2D.
	FVector2D RandomPosition = FVector2D(FMath::VRand());

	// Normalize the random position to "push" the position to the edge of the unit circle
	RandomPosition.Normalize();

	// Multiply by the spawn distance for the spawn position on the circle
	RandomPosition *= SpawnDistance;

	// Spawn the enemy at the location
	if (UWorld* World = GetWorld())
	{
		FVector EnemyLocation = GetActorLocation() + FVector(RandomPosition.X, 0.0f, RandomPosition.Y);
		AEnemy* SpawnedEnemy = World->SpawnActor<AEnemy>(EnemyActorToSpawn, EnemyLocation, FRotator::ZeroRotator);
	}
}


========================================================================
50. Difficulty System

Design:
* Increase "difficulty" by a value of "1" for each enemy spawned
* Increase difficulty "spike by "10" at certain times
* Increase Spawn Time over time

	// --- Difficulty ---
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite)
	int32 TotalEnemyCount = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 DifficultySpikeInterval = 10; // Every 10th enemy, increase difficulty

	/** Time between enemy spawns should go no lower than this value */
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float SpawnTimeMinimumLimit = 0.5;

	/** Descrease the Time between enemy spawns by this value */
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float DecreaseSpawnTimerByEveryInterval = 0.05f; // DifficultySpikeInterval

After enemy spawn:
		// Increase the difficulty
		TotalEnemyCount += 1;
		if (TotalEnemyCount % DifficultySpikeInterval == 0)
		{
			// Ensure we haven't gone past the difficulty (spawn time) limit
			if (SpawnTime > SpawnTimeMinimumLimit)
			{
				// Ensure we dont go below spawn time
				SpawnTime -= DecreaseSpawnTimerByEveryInterval; // should be "increase"
				if (SpawnTime < SpawnTimeMinimumLimit)
				{
					SpawnTime = SpawnTimeMinimumLimit;
				}

				// Stop and restart the spawning using the new SpawnTime
				StopSpawning();
				StartSpawning();
			}
		}

========================================================================
